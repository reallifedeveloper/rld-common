package com.reallifedeveloper.common.domain.registry;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.context.support.GenericApplicationContext;

import com.reallifedeveloper.common.domain.ClockTimeService;
import com.reallifedeveloper.common.domain.event.SimpleDomainEventPublisher;

public class CommonDomainRegistryTest {

    @Test
    public void initializedRegistryFindsNecessaryServices() {
        initCommonDomainRegistry();
        CommonDomainRegistry.domainEventPublisher();
        CommonDomainRegistry.timeService();
    }

    @Test
    @SuppressWarnings("NullAway")
    public void uninitializedRegistryShouldThrowException() {
        new CommonDomainRegistry().setApplicationContext(null);
        Exception e = assertThrows(IllegalStateException.class, () -> CommonDomainRegistry.domainEventPublisher());
        assertEquals("DomainRegistry has not been initialized", e.getMessage());
    }

    @Test
    public void registryWithoutDomainEventPublisherBeanShouldThrowException() {
        new CommonDomainRegistry().setApplicationContext(createApplicationContext());
        Exception e = assertThrows(NoSuchBeanDefinitionException.class, () -> CommonDomainRegistry.domainEventPublisher());
        assertEquals("No qualifying bean of type 'com.reallifedeveloper.common.domain.event.DomainEventPublisher' available",
                e.getMessage());
    }

    @Test
    public void registryWithoutTimeServiceBeanShouldThrowException() {
        new CommonDomainRegistry().setApplicationContext(createApplicationContext());
        Exception e = assertThrows(NoSuchBeanDefinitionException.class, () -> CommonDomainRegistry.timeService());
        assertEquals("No qualifying bean of type 'com.reallifedeveloper.common.domain.TimeService' available", e.getMessage());
    }

    /**
     * Initializes a {@link CommonDomainRegistry} with a {@link SimpleDomainEventPublisher} and a {@code ClockTimeService}.
     */
    public static void initCommonDomainRegistry() {
        CommonDomainRegistry domainRegistry = new CommonDomainRegistry();
        domainRegistry.setApplicationContext(createApplicationContext(SimpleDomainEventPublisher.class, ClockTimeService.class));
    }

    /**
     * Utility method to create an application context, possibly prepopulated with a number of beans.
     * <p>
     * Please note that this method assume that the beans can be generated by calling the no-args constructor. You can still configure the
     * beans by calling {@code ApplicationContext.getBean} and performing any necessary initialization.
     *
     * @param beanClasses the classes of the beans to create
     *
     * @return a {@code GenericApplicationContext} instance with instances of the specified {@code beanClasses} registered
     */
    public static GenericApplicationContext createApplicationContext(Class<?>... beanClasses) {
        GenericApplicationContext applicationContext = new GenericApplicationContext();
        for (Class<?> beanClass : beanClasses) {
            applicationContext.registerBean(beanClass);
        }
        applicationContext.refresh();
        return applicationContext;
    }
}
